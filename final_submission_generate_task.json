[
  {
    "NL": "Find the total revenue generated by campaigns that were successful, defined as campaigns with an actual spent less than the budget.",
    "Query": "Sure, I can help you with that! Based on your natural language query, the SQL statement would look something like this:\n```sql\nSELECT SUM(revenue_generated)\nFROM campaigns\nWHERE campaign_status = 'successful' AND actual_spent < budget;\n```\nHere, we are selecting the sum of the `revenue_generated` column from the `campaigns` table, but only for those campaigns where the `campaign_status` is set to 'successful' and the `actual_spent` is less than the `budget`.\n\nNote that I'm assuming the `campaign_status` column includes a value for 'successful' campaigns. If that's not the case, you may need to adjust the query accordingly."
  },
  {
    "NL": "List the product display names and their associated supplier reference IDs for all products that are currently active.",
    "Query": "SELECT products.product_display_name, products.associated_supplier_reference_id\nFROM products\nWHERE products.active_product_status = 'active';"
  },
  {
    "NL": "Retrieve the campaign name, start date, and end date for all email campaigns that have an open rate greater than 20%.",
    "Query": "SELECT campaigns.campaign_name, campaigns.start_date, campaigns.end_date\nFROM campaigns\nJOIN events ON campaigns.campaign_id = events.campaign_id\nWHERE events.event_type = 'email_open' AND events.email_open_rate > 20;"
  },
  {
    "NL": "Find all female customers above 40 years old with more than 1000 loyalty points.",
    "Query": "SELECT * \nFROM customerinfo \nWHERE person_gender = 'female' \nAND DATEDIFF(YEAR, person_date_of_birth, GETDATE()) >= 40 \nAND person_loyalty_points > 1000;"
  }
]